#!/bin/bash


# Speed up script by not using unicode.
LC_ALL=C
LANG=C

# Colors
colors=(distro)
ascii_colors=(distro)
reset='\e[0m'
ascii_bold='\e[1m'

# Cols
block_width=3
block_height=1
block_range=(0 15)
# col_offset=7  - Leave 7 spaces then print the colors
col_offset=5

color() {
    case $1 in
        [0-6])    printf '%b\e[3%sm'   "$reset" "$1" ;;
        7 | "fg") printf '\e[37m%b'    "$reset" ;;
        *)        printf '\e[38;5;%bm' "$1" ;;
    esac
}

set_colors() {
    c1="$(color "$1")${ascii_bold}"
    c2="$(color "$2")${ascii_bold}"
    c3="$(color "$3")${ascii_bold}"
    c4="$(color "$4")${ascii_bold}"
    c5="$(color "$5")${ascii_bold}"
    c6="$(color "$6")${ascii_bold}"
}

print_ascii() {
    # Colors.
    ascii_data="${ascii_data//\$\{c1\}/$c1}"
    ascii_data="${ascii_data//\$\{c2\}/$c2}"
    ascii_data="${ascii_data//\$\{c3\}/$c3}"
    ascii_data="${ascii_data//\$\{c4\}/$c4}"
    ascii_data="${ascii_data//\$\{c5\}/$c5}"
    ascii_data="${ascii_data//\$\{c6\}/$c6}"

    printf '%b\n' "$ascii_data${reset}"
    LC_ALL=C
}

get_cols() {
    local blocks blocks2 cols

    # Convert the width to space chars.
    printf -v block_width "%${block_width}s"

    # Generate the string.
    for ((block_range[0]; block_range[0]<=block_range[1]; block_range[0]++)); do
        case ${block_range[0]} in
            [0-7])
                printf -v blocks  '%b\e[3%bm\e[4%bm%b' \
                    "$blocks" "${block_range[0]}" "${block_range[0]}" "$block_width"
            ;;

            *)
                printf -v blocks2 '%b\e[38;5;%bm\e[48;5;%bm%b' \
                    "$blocks2" "${block_range[0]}" "${block_range[0]}" "$block_width"
            ;;
        esac
    done

    # Convert height into spaces.
    printf -v block_spaces "%${block_height}s"

    # Convert the spaces into rows of blocks.
    [[ "$blocks"  ]] && cols+="${block_spaces// /${blocks}[mnl}"
    [[ "$blocks2" ]] && cols+="${block_spaces// /${blocks2}[mnl}"

    # Add newlines to the string.
    cols=${cols%%nl}
    cols=${cols//nl/
    [${text_padding}C${zws}}

    case $col_offset in
        "auto") printf '\n\e[%bC%b\n\n' "$text_padding" "${zws}${cols}" ;;
        #"auto") printf '\n\e[%bC%b\n\n' "$text_padding" "${zws}${cols}" ;;
        *) printf '\n\e[%bC%b\n\n' "$col_offset" "${zws}${cols}" ;;
    esac

    unset -v blocks blocks2 cols
}

set_colors 1 2 3 4 5 6
read -rd '' ascii_data <<'EOF'
${c1}1 ${c2}2 ${c3}3 ${c4}4 ${c5}5 ${c6}6
${c3}asdhasildhailshd
EOF

print_ascii

get_cols
